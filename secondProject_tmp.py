# Form implementation generated from reading ui file 'secondProject.ui'
#
# Created by: PyQt6 UI code generator 6.4.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtCore import Qt
from PyQt6.QtGui import QColor, QCursor
from PyQt6.QtWidgets import QGraphicsDropShadowEffect


class Ui_Form(QtWidgets.QMainWindow):
    def __init__(self):
        super(Ui_Form, self).__init__()
        self.setupUi()
        self.show()
    def setupUi(self):
        self.setObjectName("Form")
        self.resize(1174, 735)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.sizePolicy().hasHeightForWidth())
        self.setSizePolicy(sizePolicy)
        self.setWindowFlag(Qt.WindowType.FramelessWindowHint)
        self.setAttribute(Qt.WidgetAttribute.WA_TranslucentBackground)
        effect = QGraphicsDropShadowEffect()
        effect.setOffset(4, 4)
        effect.setColor(QColor(0, 0, 0, 50))
        effect.setBlurRadius(10)
        self.setGraphicsEffect(effect)
        self.leftFream = QtWidgets.QFrame(self)
        self.leftFream.setGeometry(QtCore.QRect(10, 10, 80, 715))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.leftFream.sizePolicy().hasHeightForWidth())
        self.leftFream.setSizePolicy(sizePolicy)
        self.leftFream.setStyleSheet("background-color: rgb(0, 24, 102);\n"
"border-top-left-radius:10px;\n"
"border-bottom-left-radius:10px;")
        self.leftFream.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.leftFream.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.leftFream.setObjectName("leftFream")
        self.topFream = QtWidgets.QFrame(self)
        self.topFream.setGeometry(QtCore.QRect(90, 10, 1074, 40))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.topFream.sizePolicy().hasHeightForWidth())
        self.topFream.setSizePolicy(sizePolicy)
        self.topFream.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-top-right-radius:10px;\n"
"")
        self.topFream.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.topFream.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.topFream.setObjectName("topFream")
        self.lineButton = QtWidgets.QPushButton(self.topFream)
        self.lineButton.setGeometry(QtCore.QRect(984, 0, 40, 40))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineButton.sizePolicy().hasHeightForWidth())
        self.lineButton.setSizePolicy(sizePolicy)
        self.lineButton.setText("")
        self.lineButton.setObjectName("lineButton")
        self.closeButton = QtWidgets.QPushButton(self.topFream)
        self.closeButton.setGeometry(QtCore.QRect(1024, 0, 40, 40))
        self.closeButton.setText("")
        self.closeButton.setObjectName("closeButton")
        self.closeButton.raise_()
        self.lineButton.raise_()
        self.midFream = QtWidgets.QFrame(self)
        self.midFream.setGeometry(QtCore.QRect(90, 50, 1074, 80))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.midFream.sizePolicy().hasHeightForWidth())
        self.midFream.setSizePolicy(sizePolicy)
        self.midFream.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"")
        self.midFream.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.midFream.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.midFream.setObjectName("midFream")
        self.midlabel = QtWidgets.QLabel(self.midFream)
        self.midlabel.setGeometry(QtCore.QRect(50, 20, 181, 41))
        self.midlabel.setStyleSheet("font: 700 25pt \"微软雅黑\";")
        self.midlabel.setObjectName("midlabel")
        self.lineEdit = QtWidgets.QLineEdit(self.midFream)
        self.lineEdit.setGeometry(QtCore.QRect(750, 30, 300, 40))
        self.lineEdit.setStyleSheet("background-color: rgb(233, 236, 239);\n"
"font: 15pt \"微软雅黑\";\n"
"border:2px;\n"
"border-color: rgb(0,24,102);\n"
"border-radius:20px;\n"
"")
        self.lineEdit.setMaxLength(15)
        self.lineEdit.setObjectName("lineEdit")
        self.screenButton = QtWidgets.QPushButton(self.midFream)
        self.screenButton.setGeometry(QtCore.QRect(510, 40, 40, 40))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.screenButton.sizePolicy().hasHeightForWidth())
        self.screenButton.setSizePolicy(sizePolicy)
        self.screenButton.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.screenButton.setStyleSheet("background-color: rgba(0, 0, 0, 0);\n"
"selection-background-color: rgb(231,244,255);")
        self.screenButton.setText("")
        self.screenButton.setObjectName("screenButton")
        self.label = QtWidgets.QLabel(self.midFream)
        self.label.setGeometry(QtCore.QRect(570, 40, 161, 31))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        self.label.setStyleSheet("\n"
"font: 15pt \"幼圆\";")
        self.label.setObjectName("label")
        self.midlabel.raise_()
        self.lineEdit.raise_()
        self.label.raise_()
        self.screenButton.raise_()
        self.mainFream = QtWidgets.QFrame(self)
        self.mainFream.setGeometry(QtCore.QRect(90, 130, 1074, 595))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.mainFream.sizePolicy().hasHeightForWidth())
        self.mainFream.setSizePolicy(sizePolicy)
        self.mainFream.setStyleSheet("background-color: rgb(233, 236, 239);\n"
"\n"
"border-bottom-right-radius:10px;")
        self.mainFream.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.mainFream.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.mainFream.setObjectName("mainFream")

        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("Form", "Form"))
        self.midlabel.setText(_translate("Form", "欢迎使用"))
        self.label.setText(_translate("Form", "TextLabel"))
        QtCore.QMetaObject.connectSlotsByName(self)


    def mousePressEvent(self, evt):
        '''可以自定义canMove_Flag = True需要满足的条件'''
        '''subWidgetMoveFlag子窗口被点击的瞬间，就被子窗口设置，值为子窗口是否允许拖动'''
        if ( True):
            # canMoveFlag被设置成Ture，标志着一个拖动过程的开始。mouseMoveEvent函数就是用这个去判断是否在拖动。
            self.canMoveFlag = True
            self.window_origin_x = self.x()
            self.window_origin_y = self.y()
            self.mouse_origin_x = QCursor.pos().x()
            self.mouse_origin_y =  QCursor.pos().y()

    def mouseMoveEvent(self, evt):
        '''通过一个if语句的判断，只能在canMoveFlag = True时才可以单击鼠标左键拖动这个widget'''
        if (self.canMoveFlag == True):
            self.mouse_des_x = QCursor.pos().x()
            self.mouse_des_y = QCursor.pos().y()
            self.window_des_x = self.window_origin_x + self.mouse_des_x - self.mouse_origin_x
            self.window_des_y = self.window_origin_y + self.mouse_des_y - self.mouse_origin_y
            self.move(self.window_des_x, self.window_des_y)

    def mouseReleaseEvent(self, evt):
        '''subWidgetMoveFlag在释放的瞬间，被设置成False，意味着一个拖动过程的结束'''
        self.canMoveFlag = False
        self.subWidgetMoveFlag = False

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    w=Ui_Form()
    sys.exit(app.exec())


# '''最小化按钮'''
# icon1 = QIcon('icon-line.png')
# self.lineButton.setIcon(icon1)
# # self.lineButton.clicked.connect(self.hide)#
#
# '''关闭按钮'''
# icon2 = QIcon('icon-close.png')
# self.closeButton.setIcon(icon2)
# # self.lineButton.clicked.connect(self.close)#
#
# '''头像，不变的。'''
# p1 = QPixmap('head.png')
# self.headLable.setPixmap(p1)
#
# '''左侧按钮，被点击之后的颜色变化'''
# self.leftButton1.setStyleSheet("background-color:rgb(28,110,255);color:rgb(255,255,255);font: 12pt \"微软雅黑\";")
